-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\wahWahEffect\stateVariableFilter.vhd
-- Created: 2023-04-17 20:14:47
-- 
-- Generated by MATLAB 9.13 and HDL Coder 4.0
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: stateVariableFilter
-- Source Path: wahWahEffect/wahWahEffectSystem/stateVariableFilter
-- Hierarchy Level: 1
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY stateVariableFilter IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        enb_1_2048_1                      :   IN    std_logic;
        enb_1_2048_0                      :   IN    std_logic;
        audioIn                           :   IN    std_logic_vector(23 DOWNTO 0);  -- sfix24_En23
        damp                              :   IN    std_logic_vector(15 DOWNTO 0);  -- ufix16_En16
        minf                              :   IN    std_logic_vector(15 DOWNTO 0);  -- uint16
        maxf                              :   IN    std_logic_vector(15 DOWNTO 0);  -- uint16
        delta                             :   IN    std_logic_vector(15 DOWNTO 0);  -- ufix16_En16
        yb                                :   OUT   std_logic_vector(69 DOWNTO 0)  -- sfix70_En48
        );
END stateVariableFilter;


ARCHITECTURE rtl OF stateVariableFilter IS

  ATTRIBUTE multstyle : string;

  -- Component Declarations
  COMPONENT Fc
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb_1_2048_0                    :   IN    std_logic;
          minf                            :   IN    std_logic_vector(15 DOWNTO 0);  -- uint16
          maxf                            :   IN    std_logic_vector(15 DOWNTO 0);  -- uint16
          delta                           :   IN    std_logic_vector(15 DOWNTO 0);  -- ufix16_En16
          fc_1                            :   OUT   std_logic_vector(33 DOWNTO 0)  -- sfix34_En16
          );
  END COMPONENT;

  COMPONENT F1
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          fc                              :   IN    std_logic_vector(33 DOWNTO 0);  -- sfix34_En16
          f1_1                            :   OUT   std_logic_vector(68 DOWNTO 0)  -- sfix69_En48
          );
  END COMPONENT;

  COMPONENT Q1
    PORT( damp                            :   IN    std_logic_vector(15 DOWNTO 0);  -- ufix16_En16
          q1_1                            :   OUT   std_logic_vector(17 DOWNTO 0)  -- ufix18_En16
          );
  END COMPONENT;

  -- Signals
  SIGNAL Fc_out1                          : std_logic_vector(33 DOWNTO 0);  -- ufix34
  SIGNAL Fc_out1_1                        : std_logic_vector(33 DOWNTO 0);  -- ufix34
  SIGNAL F1_out1                          : std_logic_vector(68 DOWNTO 0);  -- ufix69
  SIGNAL F1_out1_signed                   : signed(68 DOWNTO 0);  -- sfix69_En48
  SIGNAL damp_1                           : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL Q1_out1                          : std_logic_vector(17 DOWNTO 0);  -- ufix18
  SIGNAL Q1_out1_unsigned                 : unsigned(17 DOWNTO 0);  -- ufix18_En16
  SIGNAL audioIn_1                        : signed(23 DOWNTO 0);  -- sfix24_En23
  SIGNAL Constant_out1                    : signed(1 DOWNTO 0);  -- sfix2
  SIGNAL Constant1_out1                   : signed(1 DOWNTO 0);  -- sfix2
  SIGNAL Product4_cast                    : signed(18 DOWNTO 0);  -- sfix19_En16
  SIGNAL Product4_mul_temp                : signed(20 DOWNTO 0);  -- sfix21_En16
  SIGNAL Product4_cast_1                  : signed(19 DOWNTO 0);  -- sfix20_En16
  SIGNAL Product4_out1                    : signed(68 DOWNTO 0);  -- sfix69_En48
  SIGNAL Sum2_out1                        : signed(69 DOWNTO 0);  -- sfix70_En48
  SIGNAL Delay_bypass_reg                 : signed(69 DOWNTO 0);  -- sfix70
  SIGNAL Delay_out1                       : signed(69 DOWNTO 0);  -- sfix70_En48
  SIGNAL Delay_out1_1                     : signed(69 DOWNTO 0);  -- sfix70_En48
  SIGNAL Delay_out1_2                     : signed(69 DOWNTO 0);  -- sfix70_En48
  SIGNAL Sum2_out1_1                      : signed(69 DOWNTO 0);  -- sfix70_En48
  SIGNAL Delay1_bypass_reg                : signed(69 DOWNTO 0);  -- sfix70
  SIGNAL Delay1_out1                      : signed(69 DOWNTO 0);  -- sfix70_En48
  SIGNAL Delay1_out1_1                    : signed(69 DOWNTO 0);  -- sfix70_En48
  SIGNAL Product2_mul_temp                : signed(138 DOWNTO 0);  -- sfix139_En96
  SIGNAL Product2_out1                    : signed(68 DOWNTO 0);  -- sfix69_En48
  SIGNAL Sum3_out1                        : signed(68 DOWNTO 0);  -- sfix69_En48
  SIGNAL Delay3_bypass_reg                : signed(68 DOWNTO 0);  -- sfix69
  SIGNAL Delay3_out1                      : signed(68 DOWNTO 0);  -- sfix69_En48
  SIGNAL Delay3_out1_1                    : signed(68 DOWNTO 0);  -- sfix69_En48
  SIGNAL Delay3_out1_2                    : signed(68 DOWNTO 0);  -- sfix69_En48
  SIGNAL Product1_mul_temp                : signed(138 DOWNTO 0);  -- sfix139_En96
  SIGNAL Product1_out1                    : signed(68 DOWNTO 0);  -- sfix69_En48
  SIGNAL Sum3_add_cast                    : signed(69 DOWNTO 0);  -- sfix70_En48
  SIGNAL Sum3_add_cast_1                  : signed(69 DOWNTO 0);  -- sfix70_En48
  SIGNAL Sum3_add_temp                    : signed(69 DOWNTO 0);  -- sfix70_En48
  SIGNAL Sum3_out1_1                      : signed(68 DOWNTO 0);  -- sfix69_En48
  SIGNAL Delay2_bypass_reg                : signed(68 DOWNTO 0);  -- sfix69
  SIGNAL Delay2_out1                      : signed(68 DOWNTO 0);  -- sfix69_En48
  SIGNAL Delay2_out1_1                    : signed(68 DOWNTO 0);  -- sfix69_En48
  SIGNAL Product3_mul_temp                : signed(70 DOWNTO 0);  -- sfix71_En48
  SIGNAL Product3_out1                    : signed(68 DOWNTO 0);  -- sfix69_En48
  SIGNAL Sum_add_cast                     : signed(69 DOWNTO 0);  -- sfix70_En48
  SIGNAL Sum_add_cast_1                   : signed(69 DOWNTO 0);  -- sfix70_En48
  SIGNAL Sum_out1                         : signed(69 DOWNTO 0);  -- sfix70_En48
  SIGNAL Sum1_add_cast                    : signed(70 DOWNTO 0);  -- sfix71_En48
  SIGNAL Sum1_add_cast_1                  : signed(70 DOWNTO 0);  -- sfix71_En48
  SIGNAL Sum1_out1                        : signed(70 DOWNTO 0);  -- sfix71_En48
  SIGNAL Sum1_out1_1                      : signed(70 DOWNTO 0);  -- sfix71_En48
  SIGNAL Product_mul_temp                 : signed(139 DOWNTO 0);  -- sfix140_En96
  SIGNAL Product_out1                     : signed(68 DOWNTO 0);  -- sfix69_En48
  SIGNAL Sum2_add_cast                    : signed(70 DOWNTO 0);  -- sfix71_En48
  SIGNAL Sum2_add_cast_1                  : signed(70 DOWNTO 0);  -- sfix71_En48
  SIGNAL Sum2_add_temp                    : signed(70 DOWNTO 0);  -- sfix71_En48

BEGIN
  u_Fc : Fc
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_2048_0 => enb_1_2048_0,
              minf => minf,  -- uint16
              maxf => maxf,  -- uint16
              delta => delta,  -- ufix16_En16
              fc_1 => Fc_out1  -- sfix34_En16
              );

  u_F1 : F1
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              fc => Fc_out1_1,  -- sfix34_En16
              f1_1 => F1_out1  -- sfix69_En48
              );

  u_Q1 : Q1
    PORT MAP( damp => damp_1,  -- ufix16_En16
              q1_1 => Q1_out1  -- ufix18_En16
              );

  Fc_out1_1 <= std_logic_vector(signed(Fc_out1));

  F1_out1_signed <= signed(F1_out1);

  damp_1 <= std_logic_vector(unsigned(damp));

  Q1_out1_unsigned <= unsigned(Q1_out1);

  audioIn_1 <= signed(audioIn);

  Constant_out1 <= to_signed(-16#1#, 2);

  Constant1_out1 <= to_signed(-16#1#, 2);

  Product4_cast <= signed(resize(Q1_out1_unsigned, 19));
  Product4_mul_temp <= Product4_cast * Constant1_out1;
  Product4_cast_1 <= Product4_mul_temp(19 DOWNTO 0);
  Product4_out1 <= resize(Product4_cast_1 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 69);

  Delay_bypass_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay_bypass_reg <= to_signed(0, 70);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_2048_1 = '1' THEN
        Delay_bypass_reg <= Sum2_out1;
      END IF;
    END IF;
  END PROCESS Delay_bypass_process;

  
  Delay_out1 <= Sum2_out1 WHEN enb_1_2048_1 = '1' ELSE
      Delay_bypass_reg;

  Delay_out1_1 <= Delay_out1;

  delayMatch1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay_out1_2 <= to_signed(0, 70);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay_out1_2 <= Delay_out1_1;
      END IF;
    END IF;
  END PROCESS delayMatch1_process;


  reduced_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Sum2_out1 <= to_signed(0, 70);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Sum2_out1 <= Sum2_out1_1;
      END IF;
    END IF;
  END PROCESS reduced_process;


  Delay1_bypass_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay1_bypass_reg <= to_signed(0, 70);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_2048_1 = '1' THEN
        Delay1_bypass_reg <= Sum2_out1;
      END IF;
    END IF;
  END PROCESS Delay1_bypass_process;

  
  Delay1_out1 <= Sum2_out1 WHEN enb_1_2048_1 = '1' ELSE
      Delay1_bypass_reg;

  Delay1_out1_1 <= Delay1_out1;

  Product2_mul_temp <= Product4_out1 * Delay1_out1_1;
  Product2_out1 <= Product2_mul_temp(116 DOWNTO 48);

  Delay3_bypass_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay3_bypass_reg <= to_signed(0, 69);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_2048_1 = '1' THEN
        Delay3_bypass_reg <= Sum3_out1;
      END IF;
    END IF;
  END PROCESS Delay3_bypass_process;

  
  Delay3_out1 <= Sum3_out1 WHEN enb_1_2048_1 = '1' ELSE
      Delay3_bypass_reg;

  Delay3_out1_1 <= Delay3_out1;

  delayMatch2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay3_out1_2 <= to_signed(0, 69);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay3_out1_2 <= Delay3_out1_1;
      END IF;
    END IF;
  END PROCESS delayMatch2_process;


  Product1_mul_temp <= F1_out1_signed * Sum2_out1_1;
  Product1_out1 <= Product1_mul_temp(116 DOWNTO 48);

  Sum3_add_cast <= resize(Product1_out1, 70);
  Sum3_add_cast_1 <= resize(Delay3_out1_2, 70);
  Sum3_add_temp <= Sum3_add_cast + Sum3_add_cast_1;
  
  Sum3_out1_1 <= "011111111111111111111111111111111111111111111111111111111111111111111" WHEN (Sum3_add_temp(69) = '0') AND (Sum3_add_temp(68) /= '0') ELSE
      "100000000000000000000000000000000000000000000000000000000000000000000" WHEN (Sum3_add_temp(69) = '1') AND (Sum3_add_temp(68) /= '1') ELSE
      Sum3_add_temp(68 DOWNTO 0);

  reduced_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Sum3_out1 <= to_signed(0, 69);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Sum3_out1 <= Sum3_out1_1;
      END IF;
    END IF;
  END PROCESS reduced_1_process;


  Delay2_bypass_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay2_bypass_reg <= to_signed(0, 69);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_2048_1 = '1' THEN
        Delay2_bypass_reg <= Sum3_out1;
      END IF;
    END IF;
  END PROCESS Delay2_bypass_process;

  
  Delay2_out1 <= Sum3_out1 WHEN enb_1_2048_1 = '1' ELSE
      Delay2_bypass_reg;

  Delay2_out1_1 <= Delay2_out1;

  Product3_mul_temp <= Constant_out1 * Delay2_out1_1;
  Product3_out1 <= Product3_mul_temp(68 DOWNTO 0);

  Sum_add_cast <= resize(audioIn_1 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 70);
  Sum_add_cast_1 <= resize(Product3_out1, 70);
  Sum_out1 <= Sum_add_cast + Sum_add_cast_1;

  Sum1_add_cast <= resize(Sum_out1, 71);
  Sum1_add_cast_1 <= resize(Product2_out1, 71);
  Sum1_out1 <= Sum1_add_cast + Sum1_add_cast_1;

  delayMatch_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Sum1_out1_1 <= to_signed(0, 71);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Sum1_out1_1 <= Sum1_out1;
      END IF;
    END IF;
  END PROCESS delayMatch_process;


  Product_mul_temp <= F1_out1_signed * Sum1_out1_1;
  Product_out1 <= Product_mul_temp(116 DOWNTO 48);

  Sum2_add_cast <= resize(Product_out1, 71);
  Sum2_add_cast_1 <= resize(Delay_out1_2, 71);
  Sum2_add_temp <= Sum2_add_cast + Sum2_add_cast_1;
  
  Sum2_out1_1 <= "0111111111111111111111111111111111111111111111111111111111111111111111" WHEN (Sum2_add_temp(70) = '0') AND (Sum2_add_temp(69) /= '0') ELSE
      "1000000000000000000000000000000000000000000000000000000000000000000000" WHEN (Sum2_add_temp(70) = '1') AND (Sum2_add_temp(69) /= '1') ELSE
      Sum2_add_temp(69 DOWNTO 0);

  yb <= std_logic_vector(Sum2_out1_1);

END rtl;

